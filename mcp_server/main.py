# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:00:17+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    CmcerCertificatePostRequest,
    CmcerCertificatePostResponse,
    CmcerCertificatePostResponse1,
    CmcerCertificatePostResponse2,
    CmcerCertificatePostResponse3,
    CmcerCertificatePostResponse4,
    CmcerCertificatePostResponse5,
    CmcerCertificatePostResponse6,
    CncerCertificatePostRequest,
    CncerCertificatePostResponse,
    CncerCertificatePostResponse1,
    CncerCertificatePostResponse2,
    CncerCertificatePostResponse3,
    CncerCertificatePostResponse4,
    CncerCertificatePostResponse5,
    CncerCertificatePostResponse6,
    CtcerCertificatePostRequest,
    CtcerCertificatePostResponse,
    CtcerCertificatePostResponse1,
    CtcerCertificatePostResponse2,
    CtcerCertificatePostResponse3,
    CtcerCertificatePostResponse4,
    CtcerCertificatePostResponse5,
    CtcerCertificatePostResponse6,
    DmcerCertificatePostRequest,
    DmcerCertificatePostResponse,
    DmcerCertificatePostResponse1,
    DmcerCertificatePostResponse2,
    DmcerCertificatePostResponse3,
    DmcerCertificatePostResponse4,
    DmcerCertificatePostResponse5,
    DmcerCertificatePostResponse6,
    DpcerCertificatePostRequest,
    DpcerCertificatePostResponse,
    DpcerCertificatePostResponse1,
    DpcerCertificatePostResponse2,
    DpcerCertificatePostResponse3,
    DpcerCertificatePostResponse4,
    DpcerCertificatePostResponse5,
    DpcerCertificatePostResponse6,
    DscerCertificatePostRequest,
    DscerCertificatePostResponse,
    DscerCertificatePostResponse1,
    DscerCertificatePostResponse2,
    DscerCertificatePostResponse3,
    DscerCertificatePostResponse4,
    DscerCertificatePostResponse5,
    DscerCertificatePostResponse6,
    FmcerCertificatePostRequest,
    FmcerCertificatePostResponse,
    FmcerCertificatePostResponse1,
    FmcerCertificatePostResponse2,
    FmcerCertificatePostResponse3,
    FmcerCertificatePostResponse4,
    FmcerCertificatePostResponse5,
    FmcerCertificatePostResponse6,
    IdcerCertificatePostRequest,
    IdcerCertificatePostResponse,
    IdcerCertificatePostResponse1,
    IdcerCertificatePostResponse2,
    IdcerCertificatePostResponse3,
    IdcerCertificatePostResponse4,
    IdcerCertificatePostResponse5,
    IdcerCertificatePostResponse6,
    ImcerCertificatePostRequest,
    ImcerCertificatePostResponse,
    ImcerCertificatePostResponse1,
    ImcerCertificatePostResponse2,
    ImcerCertificatePostResponse3,
    ImcerCertificatePostResponse4,
    ImcerCertificatePostResponse5,
    ImcerCertificatePostResponse6,
    IncerCertificatePostRequest,
    IncerCertificatePostResponse,
    IncerCertificatePostResponse1,
    IncerCertificatePostResponse2,
    IncerCertificatePostResponse3,
    IncerCertificatePostResponse4,
    IncerCertificatePostResponse5,
    IncerCertificatePostResponse6,
    LfcerCertificatePostRequest,
    LfcerCertificatePostResponse,
    LfcerCertificatePostResponse1,
    LfcerCertificatePostResponse2,
    LfcerCertificatePostResponse3,
    LfcerCertificatePostResponse4,
    LfcerCertificatePostResponse5,
    LfcerCertificatePostResponse6,
    LhcerCertificatePostRequest,
    LhcerCertificatePostResponse,
    LhcerCertificatePostResponse1,
    LhcerCertificatePostResponse2,
    LhcerCertificatePostResponse3,
    LhcerCertificatePostResponse4,
    LhcerCertificatePostResponse5,
    LhcerCertificatePostResponse6,
    LocerCertificatePostRequest,
    LocerCertificatePostResponse,
    LocerCertificatePostResponse1,
    LocerCertificatePostResponse2,
    LocerCertificatePostResponse3,
    LocerCertificatePostResponse4,
    LocerCertificatePostResponse5,
    LocerCertificatePostResponse6,
    MncerCertificatePostRequest,
    MncerCertificatePostResponse,
    MncerCertificatePostResponse1,
    MncerCertificatePostResponse2,
    MncerCertificatePostResponse3,
    MncerCertificatePostResponse4,
    MncerCertificatePostResponse5,
    MncerCertificatePostResponse6,
    NrcerCertificatePostRequest,
    NrcerCertificatePostResponse,
    NrcerCertificatePostResponse1,
    NrcerCertificatePostResponse2,
    NrcerCertificatePostResponse3,
    NrcerCertificatePostResponse4,
    NrcerCertificatePostResponse5,
    NrcerCertificatePostResponse6,
    NtcerCertificatePostRequest,
    NtcerCertificatePostResponse,
    NtcerCertificatePostResponse1,
    NtcerCertificatePostResponse2,
    NtcerCertificatePostResponse3,
    NtcerCertificatePostResponse4,
    NtcerCertificatePostResponse5,
    NtcerCertificatePostResponse6,
    OscerCertificatePostRequest,
    OscerCertificatePostResponse,
    OscerCertificatePostResponse1,
    OscerCertificatePostResponse2,
    OscerCertificatePostResponse3,
    OscerCertificatePostResponse4,
    OscerCertificatePostResponse5,
    OscerCertificatePostResponse6,
    PncerCertificatePostRequest,
    PncerCertificatePostResponse,
    PncerCertificatePostResponse1,
    PncerCertificatePostResponse2,
    PncerCertificatePostResponse3,
    PncerCertificatePostResponse4,
    PncerCertificatePostResponse5,
    PncerCertificatePostResponse6,
    PscerCertificatePostRequest,
    PscerCertificatePostResponse,
    PscerCertificatePostResponse1,
    PscerCertificatePostResponse2,
    PscerCertificatePostResponse3,
    PscerCertificatePostResponse4,
    PscerCertificatePostResponse5,
    PscerCertificatePostResponse6,
    RlcerCertificatePostRequest,
    RlcerCertificatePostResponse,
    RlcerCertificatePostResponse1,
    RlcerCertificatePostResponse2,
    RlcerCertificatePostResponse3,
    RlcerCertificatePostResponse4,
    RlcerCertificatePostResponse5,
    RlcerCertificatePostResponse6,
    RscerCertificatePostRequest,
    RscerCertificatePostResponse,
    RscerCertificatePostResponse1,
    RscerCertificatePostResponse2,
    RscerCertificatePostResponse3,
    RscerCertificatePostResponse4,
    RscerCertificatePostResponse5,
    RscerCertificatePostResponse6,
    SlcerCertificatePostRequest,
    SlcerCertificatePostResponse,
    SlcerCertificatePostResponse1,
    SlcerCertificatePostResponse2,
    SlcerCertificatePostResponse3,
    SlcerCertificatePostResponse4,
    SlcerCertificatePostResponse5,
    SlcerCertificatePostResponse6,
    VlcerCertificatePostRequest,
    VlcerCertificatePostResponse,
    VlcerCertificatePostResponse1,
    VlcerCertificatePostResponse2,
    VlcerCertificatePostResponse3,
    VlcerCertificatePostResponse4,
    VlcerCertificatePostResponse5,
    VlcerCertificatePostResponse6,
    WwcerCertificatePostRequest,
    WwcerCertificatePostResponse,
    WwcerCertificatePostResponse1,
    WwcerCertificatePostResponse2,
    WwcerCertificatePostResponse3,
    WwcerCertificatePostResponse4,
    WwcerCertificatePostResponse5,
    WwcerCertificatePostResponse6,
)

app = MCPProxy(
    description="eDistrict Kerala (https://edistrict.kerala.gov.in/) is the online service delivery portal for Kerala State Govt. Certain documents issued by it (e.g. Residence, Income, Caste Certificates etc) are made available in citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='eDistrict Kerala, Kerala',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/edistrictkerala/v3'}],
)


@app.post(
    '/cmcer/certificate',
    description=""" API to verify Community Certificate. """,
    tags=['certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def cmcer(body: CmcerCertificatePostRequest = None):
    """
    Community Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cncer/certificate',
    description=""" API to verify Conversion Certificate. """,
    tags=['certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def cncer(body: CncerCertificatePostRequest = None):
    """
    Conversion Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ctcer/certificate',
    description=""" API to verify Caste Certificate. """,
    tags=['certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ctcer(body: CtcerCertificatePostRequest = None):
    """
    Caste Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dmcer/certificate',
    description=""" API to verify Domicile Certificate. """,
    tags=['certificate_overall_management', 'geographical_location_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dmcer(body: DmcerCertificatePostRequest = None):
    """
    Domicile Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dpcer/certificate',
    description=""" API to verify Dependency Certificate. """,
    tags=['certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dpcer(body: DpcerCertificatePostRequest = None):
    """
    Dependency Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dscer/certificate',
    description=""" API to verify Destitute Certificate. """,
    tags=['certificate_overall_management', 'user_verification_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dscer(body: DscerCertificatePostRequest = None):
    """
    Destitute Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/fmcer/certificate',
    description=""" API to verify Family Membership Certificate. """,
    tags=['family_relationship_certificates', 'certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def fmcer(body: FmcerCertificatePostRequest = None):
    """
    Family Membership Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/idcer/certificate',
    description=""" API to verify Identification Certificate. """,
    tags=['user_verification_certificates', 'certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def idcer(body: IdcerCertificatePostRequest = None):
    """
    Identification Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/imcer/certificate',
    description=""" API to verify Inter-Caste Marriage Certificate. """,
    tags=[
        'certificate_overall_management',
        'user_verification_certificates',
        'family_relationship_certificates',
    ],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def imcer(body: ImcerCertificatePostRequest = None):
    """
    Inter-Caste Marriage Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/incer/certificate',
    description=""" API to verify Income Certificate. """,
    tags=['certificate_overall_management', 'financial_certificates_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def incer(body: IncerCertificatePostRequest = None):
    """
    Income Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lfcer/certificate',
    description=""" API to verify Life Certificate. """,
    tags=['certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def lfcer(body: LfcerCertificatePostRequest = None):
    """
    Life Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lhcer/certificate',
    description=""" API to verify Legal Heir Certificate. """,
    tags=['user_verification_certificates', 'family_relationship_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def lhcer(body: LhcerCertificatePostRequest = None):
    """
    Legal Heir Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/locer/certificate',
    description=""" API to verify Location Certificate. """,
    tags=['geographical_location_certificates', 'certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def locer(body: LocerCertificatePostRequest = None):
    """
    Location Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mncer/certificate',
    description=""" API to verify Minority Certificate. """,
    tags=['certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def mncer(body: MncerCertificatePostRequest = None):
    """
    Minority Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/nrcer/certificate',
    description=""" API to verify Non-Remarriage Certificate. """,
    tags=['user_verification_certificates', 'family_relationship_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def nrcer(body: NrcerCertificatePostRequest = None):
    """
    Non-Remarriage Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ntcer/certificate',
    description=""" API to verify Nativity Certificate. """,
    tags=['certificate_overall_management', 'geographical_location_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ntcer(body: NtcerCertificatePostRequest = None):
    """
    Nativity Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/oscer/certificate',
    description=""" API to verify One and the Same Certificate. """,
    tags=['certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def oscer(body: OscerCertificatePostRequest = None):
    """
    One and the Same Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/pncer/certificate',
    description=""" API to verify Possession and Non-Attachment Certificate. """,
    tags=['certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def pncer(body: PncerCertificatePostRequest = None):
    """
    Possession and Non-Attachment Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/pscer/certificate',
    description=""" API to verify Possession Certificate. """,
    tags=['certificate_overall_management', 'geographical_location_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def pscer(body: PscerCertificatePostRequest = None):
    """
    Possession Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rlcer/certificate',
    description=""" API to verify Relationship Certificate. """,
    tags=['family_relationship_certificates'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def rlcer(body: RlcerCertificatePostRequest = None):
    """
    Relationship Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rscer/certificate',
    description=""" API to verify Residence Certificate. """,
    tags=['geographical_location_certificates', 'certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def rscer(body: RscerCertificatePostRequest = None):
    """
    Residence Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/slcer/certificate',
    description=""" API to verify Solvency Certificate. """,
    tags=['financial_certificates_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def slcer(body: SlcerCertificatePostRequest = None):
    """
    Solvency Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vlcer/certificate',
    description=""" API to verify Valuation Certificate. """,
    tags=['financial_certificates_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def vlcer(body: VlcerCertificatePostRequest = None):
    """
    Valuation Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/wwcer/certificate',
    description=""" API to verify Widow-Widower Certificate. """,
    tags=['family_relationship_certificates', 'certificate_overall_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def wwcer(body: WwcerCertificatePostRequest = None):
    """
    Widow-Widower Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
