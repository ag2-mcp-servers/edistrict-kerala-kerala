# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:00:17+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, constr


class Examination(BaseModel):
    month: constr(min_length=1) = Field(..., examples=['MARCH'])
    name: constr(min_length=1) = Field(
        ..., examples=['SENION SCHOOL CERTIFICATE EXAMINATION']
    )
    year: constr(min_length=1) = Field(..., examples=[2019])


class Subject(BaseModel):
    code: constr(min_length=1) = Field(..., examples=[30])
    gp: str = Field(..., examples=[''])
    gpMax: str = Field(..., examples=[''])
    grade: constr(min_length=1) = Field(..., examples=['A2'])
    marksMax: int = Field(..., examples=[''])
    marksMaxPractical: int = Field(..., examples=[''])
    marksMaxTheory: int = Field(..., examples=[''])
    marksPractical: int = Field(..., examples=[17])
    marksTheory: int = Field(..., examples=[70])
    marksTotal: int = Field(..., examples=[87])
    name: constr(min_length=1) = Field(..., examples=['ECONOMICS'])


class Performance(BaseModel):
    Subjects: List[Subject]
    cgpa: str = Field(..., examples=[''])
    cgpaMax: str = Field(..., examples=[''])
    grade: str = Field(..., examples=[''])
    marksMax: str = Field(..., examples=[''])
    marksTotal: str = Field(..., examples=[''])
    percentage: str = Field(..., examples=[''])
    result: constr(min_length=1) = Field(..., examples=['PASS'])
    resultDate: constr(min_length=1) = Field(..., examples=['02-05-2019'])
    updateDate: str = Field(..., examples=[''])


class School(BaseModel):
    code: constr(min_length=1) = Field(..., examples=[20020])
    name: constr(min_length=1) = Field(..., examples=['DELHI PUBLIC SCHOOL GURGAON'])


class CertificateData(BaseModel):
    Examination_1: Examination = Field(..., alias='Examination')
    Performance_1: Performance = Field(..., alias='Performance')
    School_1: School = Field(..., alias='School')


class Address(BaseModel):
    country: constr(min_length=1) = Field(..., examples=['IN'])
    district: str = Field(..., examples=[''])
    house: str = Field(..., examples=[''])
    landmark: str = Field(..., examples=[''])
    line1: str = Field(..., examples=[''])
    line2: str = Field(..., examples=[''])
    locality: str = Field(..., examples=[''])
    pin: str = Field(..., examples=[''])
    state: str = Field(..., examples=[''])
    type: str = Field(..., examples=[''])
    vtc: str = Field(..., examples=[''])


class Organization(BaseModel):
    Address_1: Address = Field(..., alias='Address')
    code: str = Field(..., examples=[''])
    name: constr(min_length=1) = Field(
        ..., examples=['Central Board of Secondary Education']
    )
    tin: str = Field(..., examples=[''])
    type: constr(min_length=1) = Field(..., examples=['CG'])
    uid: str = Field(..., examples=[''])


class IssuedBy(BaseModel):
    Organization_1: Organization = Field(..., alias='Organization')


class Address1(BaseModel):
    country: constr(min_length=1) = Field(..., examples=['IN'])
    district: str = Field(..., examples=[''])
    house: str = Field(..., examples=[''])
    landmark: str = Field(..., examples=[None])
    line1: str = Field(..., examples=[''])
    line2: str = Field(..., examples=[''])
    locality: str = Field(..., examples=[''])
    pin: str = Field(..., examples=[''])
    state: str = Field(..., examples=[''])
    type: constr(min_length=1) = Field(..., examples=['permanent'])
    vtc: str = Field(..., examples=[''])


class Photo(BaseModel):
    format: str


class Person(BaseModel):
    Address: Address1
    Photo_1: Photo = Field(..., alias='Photo')
    category: constr(min_length=1) = Field(..., examples=['SC'])
    disabilityStatus: str = Field(..., examples=[''])
    dob: constr(min_length=1) = Field(..., examples=['01-10-1988'])
    email: str = Field(..., examples=[''])
    gender: str = Field(..., examples=[''])
    maritalStatus: str = Field(..., examples=[''])
    motherName: constr(min_length=1) = Field(..., examples=['SUNITA DEVI'])
    name: constr(min_length=1) = Field(..., examples=['ANAND KUMAR'])
    phone: str = Field(..., examples=[''])
    religion: str = Field(..., examples=[''])
    swd: constr(min_length=1) = Field(..., examples=['PRAMOD KUMAR'])
    swdIndicator: constr(min_length=1) = Field(..., examples=['S'])
    title: str = Field(..., examples=[''])
    uid: str = Field(..., examples=[''])


class IssuedTo(BaseModel):
    Person_1: Person = Field(..., alias='Person')


class AcademicCertificateSchema(BaseModel):
    CertificateData_1: CertificateData = Field(..., alias='CertificateData')
    IssuedBy_1: IssuedBy = Field(..., alias='IssuedBy')
    IssuedTo_1: IssuedTo = Field(..., alias='IssuedTo')
    issueDate: str = Field(..., examples=[' '])
    issuedAt: str = Field(..., examples=[''])
    language: constr(min_length=1) = Field(..., examples=[99])
    name: constr(min_length=1) = Field(..., examples=['Secondary School Certificate'])
    number: int = Field(..., examples=[1100044])
    status: constr(min_length=1) = Field(..., examples=['A'])
    type: str = Field(..., examples=['SSCER'])
    validFromDate: str = Field(..., examples=[' '])


class Category(Enum):
    SC = 'SC'
    ST = 'ST'
    OBC = 'OBC'
    GC = 'GC'


class CertificateData1(BaseModel):
    category: Category
    description: str
    name: constr(min_length=1)
    subCategory: str


class Address2(BaseModel):
    country: constr(min_length=1) = Field(..., examples=['IN'])
    district: str = Field(..., examples=[''])
    house: str = Field(..., examples=[''])
    landmark: str = Field(..., examples=[''])
    line1: str = Field(..., examples=[''])
    line2: str = Field(..., examples=[''])
    locality: str = Field(..., examples=[''])
    pin: str = Field(..., examples=[''])
    state: str = Field(..., examples=[''])
    type: str = Field(..., examples=['present'])
    vtc: str = Field(..., examples=[''])


class Organization1(BaseModel):
    Address: Address2
    code: str = Field(..., examples=[''])
    name: constr(min_length=1) = Field(..., examples=[''])
    tin: str = Field(..., examples=[''])
    type: constr(min_length=1) = Field(..., examples=['CG'])
    uid: str = Field(..., examples=[''])


class IssuedBy1(BaseModel):
    Organization: Organization1


class Address3(BaseModel):
    country: constr(min_length=1) = Field(..., examples=['IN'])
    district: str = Field(..., examples=[''])
    house: str = Field(..., examples=[''])
    landmark: str = Field(..., examples=[None])
    line1: str = Field(..., examples=[''])
    line2: str = Field(..., examples=[''])
    locality: str = Field(..., examples=[''])
    pin: str = Field(..., examples=[''])
    state: str = Field(..., examples=[''])
    type: constr(min_length=1) = Field(..., examples=['permanent'])
    vtc: str = Field(..., examples=[''])


class Person1(BaseModel):
    Address: Address3
    Photo_1: Photo = Field(..., alias='Photo')
    dob: constr(min_length=1) = Field(..., examples=[''])
    email: str = Field(..., examples=[''])
    gender: str = Field(..., examples=['M'])
    maritalStatus: str = Field(..., examples=[''])
    name: constr(min_length=1) = Field(..., examples=[''])
    phone: str = Field(..., examples=[''])
    religion: str = Field(..., examples=[''])
    swd: constr(min_length=1) = Field(..., examples=['PRAMOD KUMAR'])
    swdIndicator: constr(min_length=1) = Field(..., examples=['S'])
    title: str = Field(..., examples=[''])
    uid: str = Field(..., examples=[''])


class IssuedTo1(BaseModel):
    Person: Person1


class CasteCertificateSchema(BaseModel):
    CertificateData: CertificateData1
    IssuedBy: IssuedBy1
    IssuedTo: IssuedTo1
    expiryDate: Optional[str] = Field(None, examples=[' '])
    issueDate: str = Field(..., examples=['01-01-1980'])
    issuedAt: str = Field(..., examples=[''])
    language: constr(min_length=1) = Field(..., examples=[99])
    name: constr(min_length=1) = Field(..., examples=['Caste Certificate'])
    number: int = Field(..., examples=['C012345'])
    status: constr(min_length=1) = Field(..., examples=['A'])
    type: str = Field(..., examples=['CTCER'])
    validFromDate: str = Field(..., examples=['01-01-1980'])


class Data(BaseModel):
    id: constr(min_length=1)


class DataConsumer(BaseModel):
    id: constr(min_length=1)


class DataProvider(BaseModel):
    id: constr(min_length=1)


class DateRange(BaseModel):
    from_: datetime = Field(
        ...,
        alias='from',
        description='Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ',
    )
    to: datetime = Field(
        ...,
        description='Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ',
    )


class Frequency(BaseModel):
    repeats: float
    unit: constr(min_length=1)
    value: float


class Permission(BaseModel):
    access: constr(min_length=1)
    dateRange: DateRange
    frequency: Frequency


class Purpose(BaseModel):
    description: constr(min_length=1)


class User(BaseModel):
    email: constr(min_length=1)
    idNumber: constr(min_length=1)
    idType: constr(min_length=1)
    mobile: constr(min_length=1)


class Consent(BaseModel):
    consentId: UUID = Field(
        ...,
        description='A unique consent id in UUID format.',
        examples=['ea9c43aa-7f5a-4bf3-a0be-e1caa24737ba'],
    )
    data: Data
    dataConsumer: DataConsumer
    dataProvider: DataProvider
    permission: Permission
    purpose: Purpose
    timestamp: datetime = Field(
        ...,
        description='Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ',
    )
    user: User


class Signature(BaseModel):
    signature: str


class ConsentArtifactSchema(BaseModel):
    consent: Consent
    signature: Signature


class CertificateParameters(BaseModel):
    aplno: str = Field(..., description='Application Number', examples=['564323'])
    certno: str = Field(..., description='Certificate Number', examples=['342567'])
    sccd: str = Field(..., description='Security Code', examples=['QASE5'])


class Format(Enum):
    pdf = 'pdf'


class CmcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class CmcerCertificatePostResponse(BaseModel):
    error: Optional[Error] = None
    errorDescription: Optional[ErrorDescription] = None


class Error1(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription1(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class CmcerCertificatePostResponse1(BaseModel):
    error: Optional[Error1] = None
    errorDescription: Optional[ErrorDescription1] = None


class Error2(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription2(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class CmcerCertificatePostResponse2(BaseModel):
    error: Optional[Error2] = None
    errorDescription: Optional[ErrorDescription2] = None


class Error3(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription3(Enum):
    Internal_server_error = 'Internal server error'


class CmcerCertificatePostResponse3(BaseModel):
    error: Optional[Error3] = None
    errorDescription: Optional[ErrorDescription3] = None


class Error4(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription4(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class CmcerCertificatePostResponse4(BaseModel):
    error: Optional[Error4] = None
    errorDescription: Optional[ErrorDescription4] = None


class Error5(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription5(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class CmcerCertificatePostResponse5(BaseModel):
    error: Optional[Error5] = None
    errorDescription: Optional[ErrorDescription5] = None


class Error6(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription6(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class CmcerCertificatePostResponse6(BaseModel):
    error: Optional[Error6] = None
    errorDescription: Optional[ErrorDescription6] = None


class CncerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error7(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription7(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class CncerCertificatePostResponse(BaseModel):
    error: Optional[Error7] = None
    errorDescription: Optional[ErrorDescription7] = None


class Error8(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription8(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class CncerCertificatePostResponse1(BaseModel):
    error: Optional[Error8] = None
    errorDescription: Optional[ErrorDescription8] = None


class Error9(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription9(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class CncerCertificatePostResponse2(BaseModel):
    error: Optional[Error9] = None
    errorDescription: Optional[ErrorDescription9] = None


class Error10(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription10(Enum):
    Internal_server_error = 'Internal server error'


class CncerCertificatePostResponse3(BaseModel):
    error: Optional[Error10] = None
    errorDescription: Optional[ErrorDescription10] = None


class Error11(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription11(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class CncerCertificatePostResponse4(BaseModel):
    error: Optional[Error11] = None
    errorDescription: Optional[ErrorDescription11] = None


class Error12(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription12(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class CncerCertificatePostResponse5(BaseModel):
    error: Optional[Error12] = None
    errorDescription: Optional[ErrorDescription12] = None


class Error13(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription13(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class CncerCertificatePostResponse6(BaseModel):
    error: Optional[Error13] = None
    errorDescription: Optional[ErrorDescription13] = None


class CtcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error14(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription14(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class CtcerCertificatePostResponse(BaseModel):
    error: Optional[Error14] = None
    errorDescription: Optional[ErrorDescription14] = None


class Error15(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription15(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class CtcerCertificatePostResponse1(BaseModel):
    error: Optional[Error15] = None
    errorDescription: Optional[ErrorDescription15] = None


class Error16(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription16(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class CtcerCertificatePostResponse2(BaseModel):
    error: Optional[Error16] = None
    errorDescription: Optional[ErrorDescription16] = None


class Error17(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription17(Enum):
    Internal_server_error = 'Internal server error'


class CtcerCertificatePostResponse3(BaseModel):
    error: Optional[Error17] = None
    errorDescription: Optional[ErrorDescription17] = None


class Error18(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription18(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class CtcerCertificatePostResponse4(BaseModel):
    error: Optional[Error18] = None
    errorDescription: Optional[ErrorDescription18] = None


class Error19(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription19(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class CtcerCertificatePostResponse5(BaseModel):
    error: Optional[Error19] = None
    errorDescription: Optional[ErrorDescription19] = None


class Error20(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription20(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class CtcerCertificatePostResponse6(BaseModel):
    error: Optional[Error20] = None
    errorDescription: Optional[ErrorDescription20] = None


class DmcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error21(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription21(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class DmcerCertificatePostResponse(BaseModel):
    error: Optional[Error21] = None
    errorDescription: Optional[ErrorDescription21] = None


class Error22(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription22(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class DmcerCertificatePostResponse1(BaseModel):
    error: Optional[Error22] = None
    errorDescription: Optional[ErrorDescription22] = None


class Error23(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription23(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class DmcerCertificatePostResponse2(BaseModel):
    error: Optional[Error23] = None
    errorDescription: Optional[ErrorDescription23] = None


class Error24(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription24(Enum):
    Internal_server_error = 'Internal server error'


class DmcerCertificatePostResponse3(BaseModel):
    error: Optional[Error24] = None
    errorDescription: Optional[ErrorDescription24] = None


class Error25(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription25(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class DmcerCertificatePostResponse4(BaseModel):
    error: Optional[Error25] = None
    errorDescription: Optional[ErrorDescription25] = None


class Error26(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription26(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class DmcerCertificatePostResponse5(BaseModel):
    error: Optional[Error26] = None
    errorDescription: Optional[ErrorDescription26] = None


class Error27(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription27(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class DmcerCertificatePostResponse6(BaseModel):
    error: Optional[Error27] = None
    errorDescription: Optional[ErrorDescription27] = None


class DpcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error28(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription28(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class DpcerCertificatePostResponse(BaseModel):
    error: Optional[Error28] = None
    errorDescription: Optional[ErrorDescription28] = None


class Error29(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription29(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class DpcerCertificatePostResponse1(BaseModel):
    error: Optional[Error29] = None
    errorDescription: Optional[ErrorDescription29] = None


class Error30(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription30(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class DpcerCertificatePostResponse2(BaseModel):
    error: Optional[Error30] = None
    errorDescription: Optional[ErrorDescription30] = None


class Error31(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription31(Enum):
    Internal_server_error = 'Internal server error'


class DpcerCertificatePostResponse3(BaseModel):
    error: Optional[Error31] = None
    errorDescription: Optional[ErrorDescription31] = None


class Error32(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription32(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class DpcerCertificatePostResponse4(BaseModel):
    error: Optional[Error32] = None
    errorDescription: Optional[ErrorDescription32] = None


class Error33(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription33(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class DpcerCertificatePostResponse5(BaseModel):
    error: Optional[Error33] = None
    errorDescription: Optional[ErrorDescription33] = None


class Error34(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription34(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class DpcerCertificatePostResponse6(BaseModel):
    error: Optional[Error34] = None
    errorDescription: Optional[ErrorDescription34] = None


class DscerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error35(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription35(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class DscerCertificatePostResponse(BaseModel):
    error: Optional[Error35] = None
    errorDescription: Optional[ErrorDescription35] = None


class Error36(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription36(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class DscerCertificatePostResponse1(BaseModel):
    error: Optional[Error36] = None
    errorDescription: Optional[ErrorDescription36] = None


class Error37(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription37(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class DscerCertificatePostResponse2(BaseModel):
    error: Optional[Error37] = None
    errorDescription: Optional[ErrorDescription37] = None


class Error38(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription38(Enum):
    Internal_server_error = 'Internal server error'


class DscerCertificatePostResponse3(BaseModel):
    error: Optional[Error38] = None
    errorDescription: Optional[ErrorDescription38] = None


class Error39(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription39(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class DscerCertificatePostResponse4(BaseModel):
    error: Optional[Error39] = None
    errorDescription: Optional[ErrorDescription39] = None


class Error40(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription40(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class DscerCertificatePostResponse5(BaseModel):
    error: Optional[Error40] = None
    errorDescription: Optional[ErrorDescription40] = None


class Error41(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription41(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class DscerCertificatePostResponse6(BaseModel):
    error: Optional[Error41] = None
    errorDescription: Optional[ErrorDescription41] = None


class FmcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error42(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription42(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class FmcerCertificatePostResponse(BaseModel):
    error: Optional[Error42] = None
    errorDescription: Optional[ErrorDescription42] = None


class Error43(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription43(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class FmcerCertificatePostResponse1(BaseModel):
    error: Optional[Error43] = None
    errorDescription: Optional[ErrorDescription43] = None


class Error44(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription44(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class FmcerCertificatePostResponse2(BaseModel):
    error: Optional[Error44] = None
    errorDescription: Optional[ErrorDescription44] = None


class Error45(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription45(Enum):
    Internal_server_error = 'Internal server error'


class FmcerCertificatePostResponse3(BaseModel):
    error: Optional[Error45] = None
    errorDescription: Optional[ErrorDescription45] = None


class Error46(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription46(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class FmcerCertificatePostResponse4(BaseModel):
    error: Optional[Error46] = None
    errorDescription: Optional[ErrorDescription46] = None


class Error47(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription47(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class FmcerCertificatePostResponse5(BaseModel):
    error: Optional[Error47] = None
    errorDescription: Optional[ErrorDescription47] = None


class Error48(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription48(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class FmcerCertificatePostResponse6(BaseModel):
    error: Optional[Error48] = None
    errorDescription: Optional[ErrorDescription48] = None


class IdcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error49(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription49(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class IdcerCertificatePostResponse(BaseModel):
    error: Optional[Error49] = None
    errorDescription: Optional[ErrorDescription49] = None


class Error50(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription50(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class IdcerCertificatePostResponse1(BaseModel):
    error: Optional[Error50] = None
    errorDescription: Optional[ErrorDescription50] = None


class Error51(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription51(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class IdcerCertificatePostResponse2(BaseModel):
    error: Optional[Error51] = None
    errorDescription: Optional[ErrorDescription51] = None


class Error52(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription52(Enum):
    Internal_server_error = 'Internal server error'


class IdcerCertificatePostResponse3(BaseModel):
    error: Optional[Error52] = None
    errorDescription: Optional[ErrorDescription52] = None


class Error53(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription53(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class IdcerCertificatePostResponse4(BaseModel):
    error: Optional[Error53] = None
    errorDescription: Optional[ErrorDescription53] = None


class Error54(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription54(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class IdcerCertificatePostResponse5(BaseModel):
    error: Optional[Error54] = None
    errorDescription: Optional[ErrorDescription54] = None


class Error55(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription55(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class IdcerCertificatePostResponse6(BaseModel):
    error: Optional[Error55] = None
    errorDescription: Optional[ErrorDescription55] = None


class ImcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error56(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription56(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class ImcerCertificatePostResponse(BaseModel):
    error: Optional[Error56] = None
    errorDescription: Optional[ErrorDescription56] = None


class Error57(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription57(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class ImcerCertificatePostResponse1(BaseModel):
    error: Optional[Error57] = None
    errorDescription: Optional[ErrorDescription57] = None


class Error58(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription58(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class ImcerCertificatePostResponse2(BaseModel):
    error: Optional[Error58] = None
    errorDescription: Optional[ErrorDescription58] = None


class Error59(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription59(Enum):
    Internal_server_error = 'Internal server error'


class ImcerCertificatePostResponse3(BaseModel):
    error: Optional[Error59] = None
    errorDescription: Optional[ErrorDescription59] = None


class Error60(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription60(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class ImcerCertificatePostResponse4(BaseModel):
    error: Optional[Error60] = None
    errorDescription: Optional[ErrorDescription60] = None


class Error61(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription61(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class ImcerCertificatePostResponse5(BaseModel):
    error: Optional[Error61] = None
    errorDescription: Optional[ErrorDescription61] = None


class Error62(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription62(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class ImcerCertificatePostResponse6(BaseModel):
    error: Optional[Error62] = None
    errorDescription: Optional[ErrorDescription62] = None


class IncerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error63(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription63(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class IncerCertificatePostResponse(BaseModel):
    error: Optional[Error63] = None
    errorDescription: Optional[ErrorDescription63] = None


class Error64(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription64(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class IncerCertificatePostResponse1(BaseModel):
    error: Optional[Error64] = None
    errorDescription: Optional[ErrorDescription64] = None


class Error65(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription65(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class IncerCertificatePostResponse2(BaseModel):
    error: Optional[Error65] = None
    errorDescription: Optional[ErrorDescription65] = None


class Error66(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription66(Enum):
    Internal_server_error = 'Internal server error'


class IncerCertificatePostResponse3(BaseModel):
    error: Optional[Error66] = None
    errorDescription: Optional[ErrorDescription66] = None


class Error67(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription67(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class IncerCertificatePostResponse4(BaseModel):
    error: Optional[Error67] = None
    errorDescription: Optional[ErrorDescription67] = None


class Error68(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription68(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class IncerCertificatePostResponse5(BaseModel):
    error: Optional[Error68] = None
    errorDescription: Optional[ErrorDescription68] = None


class Error69(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription69(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class IncerCertificatePostResponse6(BaseModel):
    error: Optional[Error69] = None
    errorDescription: Optional[ErrorDescription69] = None


class LfcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error70(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription70(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class LfcerCertificatePostResponse(BaseModel):
    error: Optional[Error70] = None
    errorDescription: Optional[ErrorDescription70] = None


class Error71(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription71(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class LfcerCertificatePostResponse1(BaseModel):
    error: Optional[Error71] = None
    errorDescription: Optional[ErrorDescription71] = None


class Error72(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription72(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class LfcerCertificatePostResponse2(BaseModel):
    error: Optional[Error72] = None
    errorDescription: Optional[ErrorDescription72] = None


class Error73(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription73(Enum):
    Internal_server_error = 'Internal server error'


class LfcerCertificatePostResponse3(BaseModel):
    error: Optional[Error73] = None
    errorDescription: Optional[ErrorDescription73] = None


class Error74(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription74(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class LfcerCertificatePostResponse4(BaseModel):
    error: Optional[Error74] = None
    errorDescription: Optional[ErrorDescription74] = None


class Error75(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription75(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class LfcerCertificatePostResponse5(BaseModel):
    error: Optional[Error75] = None
    errorDescription: Optional[ErrorDescription75] = None


class Error76(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription76(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class LfcerCertificatePostResponse6(BaseModel):
    error: Optional[Error76] = None
    errorDescription: Optional[ErrorDescription76] = None


class LhcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error77(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription77(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class LhcerCertificatePostResponse(BaseModel):
    error: Optional[Error77] = None
    errorDescription: Optional[ErrorDescription77] = None


class Error78(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription78(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class LhcerCertificatePostResponse1(BaseModel):
    error: Optional[Error78] = None
    errorDescription: Optional[ErrorDescription78] = None


class Error79(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription79(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class LhcerCertificatePostResponse2(BaseModel):
    error: Optional[Error79] = None
    errorDescription: Optional[ErrorDescription79] = None


class Error80(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription80(Enum):
    Internal_server_error = 'Internal server error'


class LhcerCertificatePostResponse3(BaseModel):
    error: Optional[Error80] = None
    errorDescription: Optional[ErrorDescription80] = None


class Error81(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription81(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class LhcerCertificatePostResponse4(BaseModel):
    error: Optional[Error81] = None
    errorDescription: Optional[ErrorDescription81] = None


class Error82(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription82(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class LhcerCertificatePostResponse5(BaseModel):
    error: Optional[Error82] = None
    errorDescription: Optional[ErrorDescription82] = None


class Error83(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription83(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class LhcerCertificatePostResponse6(BaseModel):
    error: Optional[Error83] = None
    errorDescription: Optional[ErrorDescription83] = None


class LocerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error84(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription84(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class LocerCertificatePostResponse(BaseModel):
    error: Optional[Error84] = None
    errorDescription: Optional[ErrorDescription84] = None


class Error85(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription85(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class LocerCertificatePostResponse1(BaseModel):
    error: Optional[Error85] = None
    errorDescription: Optional[ErrorDescription85] = None


class Error86(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription86(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class LocerCertificatePostResponse2(BaseModel):
    error: Optional[Error86] = None
    errorDescription: Optional[ErrorDescription86] = None


class Error87(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription87(Enum):
    Internal_server_error = 'Internal server error'


class LocerCertificatePostResponse3(BaseModel):
    error: Optional[Error87] = None
    errorDescription: Optional[ErrorDescription87] = None


class Error88(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription88(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class LocerCertificatePostResponse4(BaseModel):
    error: Optional[Error88] = None
    errorDescription: Optional[ErrorDescription88] = None


class Error89(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription89(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class LocerCertificatePostResponse5(BaseModel):
    error: Optional[Error89] = None
    errorDescription: Optional[ErrorDescription89] = None


class Error90(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription90(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class LocerCertificatePostResponse6(BaseModel):
    error: Optional[Error90] = None
    errorDescription: Optional[ErrorDescription90] = None


class MncerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error91(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription91(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class MncerCertificatePostResponse(BaseModel):
    error: Optional[Error91] = None
    errorDescription: Optional[ErrorDescription91] = None


class Error92(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription92(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class MncerCertificatePostResponse1(BaseModel):
    error: Optional[Error92] = None
    errorDescription: Optional[ErrorDescription92] = None


class Error93(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription93(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class MncerCertificatePostResponse2(BaseModel):
    error: Optional[Error93] = None
    errorDescription: Optional[ErrorDescription93] = None


class Error94(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription94(Enum):
    Internal_server_error = 'Internal server error'


class MncerCertificatePostResponse3(BaseModel):
    error: Optional[Error94] = None
    errorDescription: Optional[ErrorDescription94] = None


class Error95(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription95(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class MncerCertificatePostResponse4(BaseModel):
    error: Optional[Error95] = None
    errorDescription: Optional[ErrorDescription95] = None


class Error96(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription96(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class MncerCertificatePostResponse5(BaseModel):
    error: Optional[Error96] = None
    errorDescription: Optional[ErrorDescription96] = None


class Error97(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription97(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class MncerCertificatePostResponse6(BaseModel):
    error: Optional[Error97] = None
    errorDescription: Optional[ErrorDescription97] = None


class NrcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error98(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription98(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class NrcerCertificatePostResponse(BaseModel):
    error: Optional[Error98] = None
    errorDescription: Optional[ErrorDescription98] = None


class Error99(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription99(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class NrcerCertificatePostResponse1(BaseModel):
    error: Optional[Error99] = None
    errorDescription: Optional[ErrorDescription99] = None


class Error100(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription100(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class NrcerCertificatePostResponse2(BaseModel):
    error: Optional[Error100] = None
    errorDescription: Optional[ErrorDescription100] = None


class Error101(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription101(Enum):
    Internal_server_error = 'Internal server error'


class NrcerCertificatePostResponse3(BaseModel):
    error: Optional[Error101] = None
    errorDescription: Optional[ErrorDescription101] = None


class Error102(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription102(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class NrcerCertificatePostResponse4(BaseModel):
    error: Optional[Error102] = None
    errorDescription: Optional[ErrorDescription102] = None


class Error103(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription103(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class NrcerCertificatePostResponse5(BaseModel):
    error: Optional[Error103] = None
    errorDescription: Optional[ErrorDescription103] = None


class Error104(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription104(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class NrcerCertificatePostResponse6(BaseModel):
    error: Optional[Error104] = None
    errorDescription: Optional[ErrorDescription104] = None


class NtcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error105(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription105(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class NtcerCertificatePostResponse(BaseModel):
    error: Optional[Error105] = None
    errorDescription: Optional[ErrorDescription105] = None


class Error106(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription106(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class NtcerCertificatePostResponse1(BaseModel):
    error: Optional[Error106] = None
    errorDescription: Optional[ErrorDescription106] = None


class Error107(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription107(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class NtcerCertificatePostResponse2(BaseModel):
    error: Optional[Error107] = None
    errorDescription: Optional[ErrorDescription107] = None


class Error108(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription108(Enum):
    Internal_server_error = 'Internal server error'


class NtcerCertificatePostResponse3(BaseModel):
    error: Optional[Error108] = None
    errorDescription: Optional[ErrorDescription108] = None


class Error109(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription109(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class NtcerCertificatePostResponse4(BaseModel):
    error: Optional[Error109] = None
    errorDescription: Optional[ErrorDescription109] = None


class Error110(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription110(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class NtcerCertificatePostResponse5(BaseModel):
    error: Optional[Error110] = None
    errorDescription: Optional[ErrorDescription110] = None


class Error111(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription111(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class NtcerCertificatePostResponse6(BaseModel):
    error: Optional[Error111] = None
    errorDescription: Optional[ErrorDescription111] = None


class OscerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error112(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription112(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class OscerCertificatePostResponse(BaseModel):
    error: Optional[Error112] = None
    errorDescription: Optional[ErrorDescription112] = None


class Error113(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription113(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class OscerCertificatePostResponse1(BaseModel):
    error: Optional[Error113] = None
    errorDescription: Optional[ErrorDescription113] = None


class Error114(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription114(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class OscerCertificatePostResponse2(BaseModel):
    error: Optional[Error114] = None
    errorDescription: Optional[ErrorDescription114] = None


class Error115(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription115(Enum):
    Internal_server_error = 'Internal server error'


class OscerCertificatePostResponse3(BaseModel):
    error: Optional[Error115] = None
    errorDescription: Optional[ErrorDescription115] = None


class Error116(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription116(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class OscerCertificatePostResponse4(BaseModel):
    error: Optional[Error116] = None
    errorDescription: Optional[ErrorDescription116] = None


class Error117(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription117(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class OscerCertificatePostResponse5(BaseModel):
    error: Optional[Error117] = None
    errorDescription: Optional[ErrorDescription117] = None


class Error118(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription118(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class OscerCertificatePostResponse6(BaseModel):
    error: Optional[Error118] = None
    errorDescription: Optional[ErrorDescription118] = None


class PncerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error119(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription119(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class PncerCertificatePostResponse(BaseModel):
    error: Optional[Error119] = None
    errorDescription: Optional[ErrorDescription119] = None


class Error120(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription120(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class PncerCertificatePostResponse1(BaseModel):
    error: Optional[Error120] = None
    errorDescription: Optional[ErrorDescription120] = None


class Error121(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription121(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class PncerCertificatePostResponse2(BaseModel):
    error: Optional[Error121] = None
    errorDescription: Optional[ErrorDescription121] = None


class Error122(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription122(Enum):
    Internal_server_error = 'Internal server error'


class PncerCertificatePostResponse3(BaseModel):
    error: Optional[Error122] = None
    errorDescription: Optional[ErrorDescription122] = None


class Error123(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription123(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class PncerCertificatePostResponse4(BaseModel):
    error: Optional[Error123] = None
    errorDescription: Optional[ErrorDescription123] = None


class Error124(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription124(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class PncerCertificatePostResponse5(BaseModel):
    error: Optional[Error124] = None
    errorDescription: Optional[ErrorDescription124] = None


class Error125(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription125(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class PncerCertificatePostResponse6(BaseModel):
    error: Optional[Error125] = None
    errorDescription: Optional[ErrorDescription125] = None


class PscerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error126(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription126(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class PscerCertificatePostResponse(BaseModel):
    error: Optional[Error126] = None
    errorDescription: Optional[ErrorDescription126] = None


class Error127(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription127(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class PscerCertificatePostResponse1(BaseModel):
    error: Optional[Error127] = None
    errorDescription: Optional[ErrorDescription127] = None


class Error128(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription128(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class PscerCertificatePostResponse2(BaseModel):
    error: Optional[Error128] = None
    errorDescription: Optional[ErrorDescription128] = None


class Error129(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription129(Enum):
    Internal_server_error = 'Internal server error'


class PscerCertificatePostResponse3(BaseModel):
    error: Optional[Error129] = None
    errorDescription: Optional[ErrorDescription129] = None


class Error130(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription130(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class PscerCertificatePostResponse4(BaseModel):
    error: Optional[Error130] = None
    errorDescription: Optional[ErrorDescription130] = None


class Error131(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription131(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class PscerCertificatePostResponse5(BaseModel):
    error: Optional[Error131] = None
    errorDescription: Optional[ErrorDescription131] = None


class Error132(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription132(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class PscerCertificatePostResponse6(BaseModel):
    error: Optional[Error132] = None
    errorDescription: Optional[ErrorDescription132] = None


class RlcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error133(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription133(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class RlcerCertificatePostResponse(BaseModel):
    error: Optional[Error133] = None
    errorDescription: Optional[ErrorDescription133] = None


class Error134(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription134(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class RlcerCertificatePostResponse1(BaseModel):
    error: Optional[Error134] = None
    errorDescription: Optional[ErrorDescription134] = None


class Error135(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription135(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class RlcerCertificatePostResponse2(BaseModel):
    error: Optional[Error135] = None
    errorDescription: Optional[ErrorDescription135] = None


class Error136(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription136(Enum):
    Internal_server_error = 'Internal server error'


class RlcerCertificatePostResponse3(BaseModel):
    error: Optional[Error136] = None
    errorDescription: Optional[ErrorDescription136] = None


class Error137(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription137(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class RlcerCertificatePostResponse4(BaseModel):
    error: Optional[Error137] = None
    errorDescription: Optional[ErrorDescription137] = None


class Error138(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription138(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class RlcerCertificatePostResponse5(BaseModel):
    error: Optional[Error138] = None
    errorDescription: Optional[ErrorDescription138] = None


class Error139(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription139(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class RlcerCertificatePostResponse6(BaseModel):
    error: Optional[Error139] = None
    errorDescription: Optional[ErrorDescription139] = None


class RscerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error140(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription140(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class RscerCertificatePostResponse(BaseModel):
    error: Optional[Error140] = None
    errorDescription: Optional[ErrorDescription140] = None


class Error141(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription141(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class RscerCertificatePostResponse1(BaseModel):
    error: Optional[Error141] = None
    errorDescription: Optional[ErrorDescription141] = None


class Error142(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription142(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class RscerCertificatePostResponse2(BaseModel):
    error: Optional[Error142] = None
    errorDescription: Optional[ErrorDescription142] = None


class Error143(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription143(Enum):
    Internal_server_error = 'Internal server error'


class RscerCertificatePostResponse3(BaseModel):
    error: Optional[Error143] = None
    errorDescription: Optional[ErrorDescription143] = None


class Error144(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription144(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class RscerCertificatePostResponse4(BaseModel):
    error: Optional[Error144] = None
    errorDescription: Optional[ErrorDescription144] = None


class Error145(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription145(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class RscerCertificatePostResponse5(BaseModel):
    error: Optional[Error145] = None
    errorDescription: Optional[ErrorDescription145] = None


class Error146(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription146(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class RscerCertificatePostResponse6(BaseModel):
    error: Optional[Error146] = None
    errorDescription: Optional[ErrorDescription146] = None


class SlcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error147(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription147(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class SlcerCertificatePostResponse(BaseModel):
    error: Optional[Error147] = None
    errorDescription: Optional[ErrorDescription147] = None


class Error148(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription148(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class SlcerCertificatePostResponse1(BaseModel):
    error: Optional[Error148] = None
    errorDescription: Optional[ErrorDescription148] = None


class Error149(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription149(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class SlcerCertificatePostResponse2(BaseModel):
    error: Optional[Error149] = None
    errorDescription: Optional[ErrorDescription149] = None


class Error150(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription150(Enum):
    Internal_server_error = 'Internal server error'


class SlcerCertificatePostResponse3(BaseModel):
    error: Optional[Error150] = None
    errorDescription: Optional[ErrorDescription150] = None


class Error151(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription151(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class SlcerCertificatePostResponse4(BaseModel):
    error: Optional[Error151] = None
    errorDescription: Optional[ErrorDescription151] = None


class Error152(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription152(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class SlcerCertificatePostResponse5(BaseModel):
    error: Optional[Error152] = None
    errorDescription: Optional[ErrorDescription152] = None


class Error153(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription153(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class SlcerCertificatePostResponse6(BaseModel):
    error: Optional[Error153] = None
    errorDescription: Optional[ErrorDescription153] = None


class VlcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error154(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription154(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class VlcerCertificatePostResponse(BaseModel):
    error: Optional[Error154] = None
    errorDescription: Optional[ErrorDescription154] = None


class Error155(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription155(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class VlcerCertificatePostResponse1(BaseModel):
    error: Optional[Error155] = None
    errorDescription: Optional[ErrorDescription155] = None


class Error156(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription156(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class VlcerCertificatePostResponse2(BaseModel):
    error: Optional[Error156] = None
    errorDescription: Optional[ErrorDescription156] = None


class Error157(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription157(Enum):
    Internal_server_error = 'Internal server error'


class VlcerCertificatePostResponse3(BaseModel):
    error: Optional[Error157] = None
    errorDescription: Optional[ErrorDescription157] = None


class Error158(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription158(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class VlcerCertificatePostResponse4(BaseModel):
    error: Optional[Error158] = None
    errorDescription: Optional[ErrorDescription158] = None


class Error159(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription159(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class VlcerCertificatePostResponse5(BaseModel):
    error: Optional[Error159] = None
    errorDescription: Optional[ErrorDescription159] = None


class Error160(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription160(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class VlcerCertificatePostResponse6(BaseModel):
    error: Optional[Error160] = None
    errorDescription: Optional[ErrorDescription160] = None


class WwcerCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error161(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription161(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class WwcerCertificatePostResponse(BaseModel):
    error: Optional[Error161] = None
    errorDescription: Optional[ErrorDescription161] = None


class Error162(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription162(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class WwcerCertificatePostResponse1(BaseModel):
    error: Optional[Error162] = None
    errorDescription: Optional[ErrorDescription162] = None


class Error163(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription163(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class WwcerCertificatePostResponse2(BaseModel):
    error: Optional[Error163] = None
    errorDescription: Optional[ErrorDescription163] = None


class Error164(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription164(Enum):
    Internal_server_error = 'Internal server error'


class WwcerCertificatePostResponse3(BaseModel):
    error: Optional[Error164] = None
    errorDescription: Optional[ErrorDescription164] = None


class Error165(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription165(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class WwcerCertificatePostResponse4(BaseModel):
    error: Optional[Error165] = None
    errorDescription: Optional[ErrorDescription165] = None


class Error166(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription166(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class WwcerCertificatePostResponse5(BaseModel):
    error: Optional[Error166] = None
    errorDescription: Optional[ErrorDescription166] = None


class Error167(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription167(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class WwcerCertificatePostResponse6(BaseModel):
    error: Optional[Error167] = None
    errorDescription: Optional[ErrorDescription167] = None
